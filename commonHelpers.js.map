{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport \"izitoast/dist/css/iziToast.min.css\"\n\n\nconst btnRef = document.querySelector('button[data-start]');\nconst hoursRef = document.querySelector('span[data-hours]');\nconst daysRef = document.querySelector('span[data-days]');\nconst minutesRef = document.querySelector('span[data-minutes]');\nconst secondsRef = document.querySelector('span[data-seconds]');\nconst datetimePicker = flatpickr('#datetime-picker', {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    let userSelectedDate = selectedDates[0].getTime();\n    const dateNow = new Date();\n    if (userSelectedDate < dateNow.getTime()) {\n      iziToast.show({\n    message: 'Please choose a date in the future'\n});\n      btnRef.disabled = true;\n    } else {\n      btnRef.disabled = false;\n    }\n  },\n});\nlet timerId;\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n  let days = Math.floor(ms / day);\n  let hours = Math.floor((ms % day) / hour);\n  let minutes = Math.floor(((ms % day) % hour) / minute);\n  let seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  return { days, hours, minutes, seconds };\n}\nfunction updateDateTime() {\n  const selectedDate = datetimePicker.selectedDates[0].getTime();\n  const currentDate = new Date().getTime();\n  const difference = selectedDate - currentDate;\n  const { days, hours, minutes, seconds } = convertMs(difference);\n  daysRef.textContent = days > 0 ? addingZero(days) : '0';\n  hoursRef.textContent = hours > 0 ? addingZero(hours) : '0';\n  minutesRef.textContent = minutes > 0 ? addingZero(minutes) : '0';\n  secondsRef.textContent = seconds > 0 ? addingZero(seconds) : '0';\n  if (difference <= 0) {\n    clearInterval(timerId);\n    return;\n  }\n}\nfunction addingZero(value) {\n  return value.toString().padStart(2, '0');\n}\nfunction onBtnClick() {\n  updateDateTime();\n  timerId = setInterval(() => updateDateTime(), 1000);\n}\nbtnRef.addEventListener('click', onBtnClick);"],"names":["btnRef","hoursRef","daysRef","minutesRef","secondsRef","datetimePicker","flatpickr","selectedDates","iziToast","timerId","convertMs","ms","days","hours","minutes","seconds","updateDateTime","selectedDate","currentDate","difference","addingZero","value","onBtnClick"],"mappings":"iyBAMA,MAAMA,EAAS,SAAS,cAAc,oBAAoB,EACpDC,EAAW,SAAS,cAAc,kBAAkB,EACpDC,EAAU,SAAS,cAAc,iBAAiB,EAClDC,EAAa,SAAS,cAAc,oBAAoB,EACxDC,EAAa,SAAS,cAAc,oBAAoB,EACxDC,EAAiBC,EAAU,mBAAoB,CACnD,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACEA,EAAc,CAAC,EAAE,QAAO,EAC/B,IAAI,OACW,WAC7BC,EAAS,KAAK,CAChB,QAAS,oCACb,CAAC,EACKR,EAAO,SAAW,IAElBA,EAAO,SAAW,EAErB,CACH,CAAC,EACD,IAAIS,EACJ,SAASC,EAAUC,EAAI,CAKrB,IAAIC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAChE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CACA,SAASC,GAAiB,CACxB,MAAMC,EAAeZ,EAAe,cAAc,CAAC,EAAE,QAAO,EACtDa,EAAc,IAAI,KAAM,EAAC,QAAO,EAChCC,EAAaF,EAAeC,EAC5B,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUS,CAAU,EAK9D,GAJAjB,EAAQ,YAAcU,EAAO,EAAIQ,EAAWR,CAAI,EAAI,IACpDX,EAAS,YAAcY,EAAQ,EAAIO,EAAWP,CAAK,EAAI,IACvDV,EAAW,YAAcW,EAAU,EAAIM,EAAWN,CAAO,EAAI,IAC7DV,EAAW,YAAcW,EAAU,EAAIK,EAAWL,CAAO,EAAI,IACzDI,GAAc,EAAG,CACnB,cAAcV,CAAO,EACrB,MACD,CACH,CACA,SAASW,EAAWC,EAAO,CACzB,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC,CACA,SAASC,GAAa,CACpBN,IACAP,EAAU,YAAY,IAAMO,EAAgB,EAAE,GAAI,CACpD,CACAhB,EAAO,iBAAiB,QAASsB,CAAU"}